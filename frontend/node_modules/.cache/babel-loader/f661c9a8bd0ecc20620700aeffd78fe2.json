{"ast":null,"code":"/*\nimport React, { useState, useEffect } from \"react\";\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Navigation from \"./components/navbar/Navigation\";\nimport Choir from \"./views/choirPage/Choir\";\nimport ChurchService from \"./views/churchServicePage/ChurchService\";\nimport Community from \"./views/communityPage/Community\";\nimport Contact from \"./views/contactPage/Contact\";\nimport Login from \"./views/loginPage/Login\";\nimport Register from \"./views/registerPage/Register\";\nimport Children from \"./views/childrenPage/Children\";\nimport NotFound from \"./views/notFoundPage/NotFound\";\nimport Report from \"./views/reportPage/Report\";\n\n\n// a useContext hook to access the value of the context is used for the entire application\nexport const MyContext = React.createContext();\n\nfunction App() {\n  // The useState hook that is used to create a state variable and set its initial value.\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [songs, setSongs] = useState([]);\n  const [finances, setFinances] = useState([]);\n  const [sacraments, setSacraments] = useState([]);\n  const [ isUserLoggedIn, setIsUserLoggedIn ] = useState(false);\n  const [consent, setConsent] = useState(false);\n  const [ token, setToken ] = useState(false);\n\n  // Token local storage useEffect hook to set the token state variable\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(\"data\"));\n    if (data) {\n      setToken(token);\n      setIsUserLoggedIn(true);\n      setUsers(data.id)\n    }\n  }, []);\n\n\n// The useEffect hook is used to run a piece of code on a specific condition.\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:5000/finances\");\n      const data = await response.json();\n\n      try{\n        if(response.ok) {\n          setFinances(data);\n        } else {\n          throw new Error(\"Something went wrong\");\n        }\n      }catch(err){\n        console.log(err);\n      }\n    }\n    fetchData();\n  }, []);\n\n  // The useEffect on the sacraments mount to run the sacraments report\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:5000/sacraments\");\n      const data = await response.json();\n\n      try{\n        if(response.ok) {\n          setSacraments(data);\n        } else {\n          throw new Error(\"Something went wrong\");\n        }\n      }catch(err){\n        console.log(err);\n      }\n    }\n    fetchData();\n  }, []);\n\n\n  return (\n    <MyContext.Provider value={{users, setUsers, messages, setMessages, songs, setSongs, finances, setFinances, sacraments, setSacraments, isUserLoggedIn, setIsUserLoggedIn, token, setToken, consent, setConsent}}>\n      <div className=\"App\">\n        <Router>\n          <header>\n            <Navigation />\n          </header>\n          <main>\n            <Routes>\n              <Route path=\"/\" element={<Community/>} />\n              <Route path=\"/service\" element={<ChurchService />} />\n              <Route path=\"/choir\" element={<Choir />} />\n              <Route path=\"/children\" element={<Children/>} />\n              <Route path=\"/contact\" element={<Contact />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/register\" element={<Register />} />\n              <Route path=\"/report\" element={<Report/>} />\n              <Route path=\"*\" element={<NotFound/>} />\n            </Routes>\n          </main>\n          <footer></footer>\n        </Router>\n      </div>\n    </MyContext.Provider>\n  );\n}\n\nexport default App;\n*/","map":{"version":3,"sources":["/home/user/Desktop/myProjects/eritrean-roman-catholic-church-hamburg/frontend/src/App.js"],"names":[],"mappingssourcesContent":["\n\n/*\nimport React, { useState, useEffect } from \"react\";\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Navigation from \"./components/navbar/Navigation\";\nimport Choir from \"./views/choirPage/Choir\";\nimport ChurchService from \"./views/churchServicePage/ChurchService\";\nimport Community from \"./views/communityPage/Community\";\nimport Contact from \"./views/contactPage/Contact\";\nimport Login from \"./views/loginPage/Login\";\nimport Register from \"./views/registerPage/Register\";\nimport Children from \"./views/childrenPage/Children\";\nimport NotFound from \"./views/notFoundPage/NotFound\";\nimport Report from \"./views/reportPage/Report\";\n\n\n// a useContext hook to access the value of the context is used for the entire application\nexport const MyContext = React.createContext();\n\nfunction App() {\n  // The useState hook that is used to create a state variable and set its initial value.\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [songs, setSongs] = useState([]);\n  const [finances, setFinances] = useState([]);\n  const [sacraments, setSacraments] = useState([]);\n  const [ isUserLoggedIn, setIsUserLoggedIn ] = useState(false);\n  const [consent, setConsent] = useState(false);\n  const [ token, setToken ] = useState(false);\n\n  // Token local storage useEffect hook to set the token state variable\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(\"data\"));\n    if (data) {\n      setToken(token);\n      setIsUserLoggedIn(true);\n      setUsers(data.id)\n    }\n  }, []);\n\n\n// The useEffect hook is used to run a piece of code on a specific condition.\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:5000/finances\");\n      const data = await response.json();\n\n      try{\n        if(response.ok) {\n          setFinances(data);\n        } else {\n          throw new Error(\"Something went wrong\");\n        }\n      }catch(err){\n        console.log(err);\n      }\n    }\n    fetchData();\n  }, []);\n\n  // The useEffect on the sacraments mount to run the sacraments report\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:5000/sacraments\");\n      const data = await response.json();\n\n      try{\n        if(response.ok) {\n          setSacraments(data);\n        } else {\n          throw new Error(\"Something went wrong\");\n        }\n      }catch(err){\n        console.log(err);\n      }\n    }\n    fetchData();\n  }, []);\n\n\n  return (\n    <MyContext.Provider value={{users, setUsers, messages, setMessages, songs, setSongs, finances, setFinances, sacraments, setSacraments, isUserLoggedIn, setIsUserLoggedIn, token, setToken, consent, setConsent}}>\n      <div className=\"App\">\n        <Router>\n          <header>\n            <Navigation />\n          </header>\n          <main>\n            <Routes>\n              <Route path=\"/\" element={<Community/>} />\n              <Route path=\"/service\" element={<ChurchService />} />\n              <Route path=\"/choir\" element={<Choir />} />\n              <Route path=\"/children\" element={<Children/>} />\n              <Route path=\"/contact\" element={<Contact />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/register\" element={<Register />} />\n              <Route path=\"/report\" element={<Report/>} />\n              <Route path=\"*\" element={<NotFound/>} />\n            </Routes>\n          </main>\n          <footer></footer>\n        </Router>\n      </div>\n    </MyContext.Provider>\n  );\n}\n\nexport default App;\n*/"]},"metadata":{},"sourceType":"module"}